stages:
 - check_permissions
 - build
 - test_run_sim
 - test_run_reco
 - test_run_digi
 - deploy
 
before_script:
  - '[ $OS_TYPE == "centos7" ] && source /cvmfs/nica.jinr.ru/centos7/bmn/env.sh'
  - export SIMPATH=/cvmfs/nica.jinr.ru/$OS_TYPE/fairsoft/bmn
  - export FAIRROOTPATH=/cvmfs/nica.jinr.ru/$OS_TYPE/fairroot/bmn
  - source ./SetEnv.sh
 
variables:
 GIT_SUBMODULE_STRATEGY: recursive
 GREEN: '\033[1;32m'
 RED: '\033[1;31m'
 NC: '\033[0m'

.only-default: &only-default
  only:
    - merge_requests
    - dev
    - tags

check_permissions:
  image: git.jinr.ru:5005/nica/docker-images/centos7/base:latest
  variables:
    OS_TYPE: "centos7"
    PERMISSIONS_MESSAGE_FAUILURE: "Permissions check: ${RED}FAILED${NC}. You don't have permission to change some files, please contact your project maintainers."
    PERMISSIONS_MESSAGE_SUCCESS: "Permissions check: ${GREEN}PASSED${NC}."
  before_script:
    - echo "Skipping global before_script"
  tags:
    - docker
  stage: check_permissions
  script:
    - >
      if git diff HEAD~ --name-only|grep .gitlab-ci.yml; then
        if grep -q $GITLAB_USER_LOGIN <<< $MAINTAINERS; then echo -e $PERMISSIONS_MESSAGE_SUCCESS $(exit 0); else echo -e $PERMISSIONS_MESSAGE_FAUILURE; $(exit -1); fi
      fi;
  allow_failure: false
  <<: *only-default
 
.build_template: &build
  stage: build
  artifacts:
    paths:
      - build
  script:
    - mkdir build
    - cd build
    - cmake "$CI_PROJECT_DIR"
    - make -j 5
  allow_failure: false
  <<: *only-default
  
build:centos:
  image: git.jinr.ru:5005/nica/docker-images/centos7/base:latest
  variables:
    OS_TYPE: "centos7"
  tags:
    - docker
    - cvmfs
  needs: ["check_permissions"]
  <<: *build

build:ubuntu:
  image: git.jinr.ru:5005/nica/docker-images/ubuntu/base:latest
  variables:
    OS_TYPE: "ubuntu2004"
  tags: 
    - docker
    - cvmfs
  needs: ["check_permissions"]
  <<: *build 
  
.run_sim_template: &run_sim
  stage: test_run_sim
  artifacts:
    paths:
      - macro/run/bmnsim.root
      - macro/run/srcsim.root
  script:
    - source build/config.sh
    - export MALLOC_CHECK_=2 && root -b -q -l '$CI_PROJECT_DIR/$MACRO_NAME' | tee output.txt
    - (if grep -q "Macro finished successfully." output.txt; then $(exit 0); else $(exit -1); fi);
  allow_failure: false
  <<: *only-default
  
run_sim_bmn:centos:
  image: git.jinr.ru:5005/nica/docker-images/centos7/base:latest
  variables:
    OS_TYPE: "centos7"
    MACRO_NAME: "macro/run/run_sim_bmn.C"
  tags:
    - docker
    - cvmfs
  needs: ["build:centos"]
  dependencies:
    - build:centos
  <<: *run_sim

run_sim_bmn:ubuntu:
  image: git.jinr.ru:5005/nica/docker-images/ubuntu/base:latest
  variables:
    MACRO_NAME: "macro/run/run_sim_bmn.C"
    OS_TYPE: "ubuntu2004"
  tags:
    - docker
    - cvmfs
  needs: ["build:ubuntu"]
  dependencies:
    - build:ubuntu
  <<: *run_sim

run_sim_src:centos:
  image: git.jinr.ru:5005/nica/docker-images/centos7/base:latest
  variables:
    OS_TYPE: "centos7"
    MACRO_NAME: "macro/run/run_sim_src.C"
  tags:
    - docker
    - cvmfs
  needs: ["build:centos"]
  dependencies:
    - build:centos
  <<: *run_sim

run_sim_src:ubuntu:
  image: git.jinr.ru:5005/nica/docker-images/ubuntu/base:latest
  variables:
    OS_TYPE: "ubuntu2004"
    MACRO_NAME: "macro/run/run_sim_src.C"
  tags:
    - docker
    - cvmfs
  needs: ["build:ubuntu"]
  dependencies:
    - build:ubuntu
  <<: *run_sim

.run_reco_template: &run_reco
  stage: test_run_reco
  artifacts:
    paths:
      - macro/run/bmndst.root
      - macro/run/srcdst.root
  script:
    - source build/config.sh
    - root -b -q -l "$CI_PROJECT_DIR/$MACRO_NAME" | tee output.txt
    - (if grep -q "Macro finished successfully." output.txt; then $(exit 0); else $(exit -1); fi);
  allow_failure: false
  <<: *only-default
  
run_reco_bmn:centos:
  image: git.jinr.ru:5005/nica/docker-images/centos7/base:latest
  variables:
    OS_TYPE: "centos7"
    MACRO_NAME: "macro/run/run_reco_bmn.C"
  tags:
    - docker
    - cvmfs
  needs: 
    - build:centos
    - run_sim_bmn:centos
  dependencies:
    - build:centos
    - run_sim_bmn:centos
  <<: *run_reco
  
run_reco_bmn:ubuntu:
  image: git.jinr.ru:5005/nica/docker-images/ubuntu/base:latest
  variables:
    OS_TYPE: "ubuntu2004"
    MACRO_NAME: "macro/run/run_reco_bmn.C"
  tags:
    - docker
    - cvmfs
  needs:
    - build:ubuntu
    - run_sim_bmn:ubuntu
  dependencies:
    - build:ubuntu
    - run_sim_bmn:ubuntu
  <<: *run_reco

run_reco_src:centos:
  image: git.jinr.ru:5005/nica/docker-images/centos7/base:latest
  variables:
    OS_TYPE: "centos7"
    MACRO_NAME: "macro/run/run_reco_src.C"
  tags:
    - docker
    - cvmfs
  needs:
    - build:centos
    - run_sim_src:centos
  dependencies:
    - build:centos
    - run_sim_src:centos
  <<: *run_reco
  
run_reco_src:ubuntu:
  image: git.jinr.ru:5005/nica/docker-images/ubuntu/base:latest
  variables:
    OS_TYPE: "ubuntu2004"
    MACRO_NAME: "macro/run/run_reco_src.C"
  tags:
    - docker
    - cvmfs
  needs:
    - build:ubuntu 
    - run_sim_src:ubuntu
  dependencies:
    - build:ubuntu
    - run_sim_src:ubuntu
  <<: *run_reco
  
.run_digi_template: &run_digi
  stage: test_run_digi
  script:
    - source build/config.sh
    - export MALLOC_CHECK_=0 && root -b -q -l "$MACRO_NAME" | tee output.txt
    - (if grep -q "Macro finished successfully." output.txt; then $(exit 0); else $(exit -1); fi);
  allow_failure: false
  <<: *only-default
  
run_digi_bmn:centos:
  image: git.jinr.ru:5005/nica/docker-images/centos7/base:latest
  variables:
    OS_TYPE: "centos7"
    MACRO_NAME: '$$CI_PROJECT_DIR/macro/run/run_reco_bmn.C("$$VMCWORKDIR/macro/run/testDigi.root", "$$VMCWORKDIR/macro/run/bmndst_exp.root", 0, 100)'
  tags:
    - docker
    - cvmfs
  needs: 
    - build:centos
    - run_reco_bmn:centos
  dependencies:
    - build:centos
  <<: *run_digi
  
run_digi_bmn:ubuntu:
  image: git.jinr.ru:5005/nica/docker-images/ubuntu/base:latest
  variables:
    OS_TYPE: "ubuntu2004"
    MACRO_NAME: '$$CI_PROJECT_DIR/macro/run/run_reco_bmn.C("$$VMCWORKDIR/macro/run/testDigi.root", "$$VMCWORKDIR/macro/run/bmndst_exp.root", 0, 100)'
  tags:
    - docker
    - cvmfs
  needs: 
    - build:ubuntu
    - run_reco_bmn:ubuntu
  dependencies:
    - build:ubuntu
  <<: *run_digi

run_digi_src:centos:
  image: git.jinr.ru:5005/nica/docker-images/centos7/base:latest
  variables:
    OS_TYPE: "centos7"
    MACRO_NAME: '$$CI_PROJECT_DIR/macro/run/run_reco_src.C("$$VMCWORKDIR/macro/run/testSRCDigi.root", "$$VMCWORKDIR/macro/run/srcdst_exp.root", 0, 100)'
  tags:
    - docker
    - cvmfs
  needs: 
    - build:centos
    - run_reco_src:centos
  dependencies:
    - build:centos
  <<: *run_digi
  
run_digi_src:ubuntu:
  image: git.jinr.ru:5005/nica/docker-images/ubuntu/base:latest
  variables:
    OS_TYPE: "ubuntu2004"
    MACRO_NAME: '$$CI_PROJECT_DIR/macro/run/run_reco_src.C("$$VMCWORKDIR/macro/run/testSRCDigi.root", "$$VMCWORKDIR/macro/run/srcdst_exp.root", 0, 100)'
  tags:
    - docker
    - cvmfs
  needs: 
    - build:ubuntu
    - run_reco_src:ubuntu
  dependencies:
    - build:ubuntu
  <<: *run_digi


.deploy_template: &deploy
  stage: deploy
  before_script:
    - echo "Skipping global before_script"
  script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add /dev/stdin > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - rm -rf build
    - mkdir build
    - cd build
    - source /cvmfs/nica.jinr.ru/centos7/bmn/env.sh
    - source ../SetEnv.sh
    - echo "Installing in /cvmfs/nica.jinr.ru/$CI_ENVIRONMENT_NAME/bmnroot/$CI_COMMIT_REF_NAME"
    - cmake -DCMAKE_INSTALL_PREFIX=/cvmfs/nica.jinr.ru/$CI_ENVIRONMENT_NAME/bmnroot/$CI_COMMIT_REF_NAME ..
    - make -j 5
    - make install
    - |
      retries=5
      cooldown=15

      ready=0
      for i in `seq 1 $retries`; do
        echo -n "Checking if repository is in transaction... "
        if ssh $STRATUM_0 "cvmfs_server list | grep -E 'nica.*in transaction' 1>/dev/null" ; then
          [ $i -le $retries ] && echo "${RED}YES${NC}, retry $i/$retries in ${cooldown}s"
        else
          echo '${GREEN}OK{NC}, ready to start new transaction'
          ready=1
          break
        fi
        sleep $cooldown
      done

      if [ $ready -eq 1 ]; then
        echo "Starting transaction"
        ssh $STRATUM_0 "sudo cvmfs_server transaction nica.jinr.ru"
        rsync --filter='-p .cvmfscatalog' --filter='-p .cvmfsautocatalog' -a --delete /cvmfs/nica.jinr.ru/$CI_ENVIRONMENT_NAME/bmnroot/$CI_COMMIT_REF_NAME $STRATUM_0:/cvmfs/nica.jinr.ru/$CI_ENVIRONMENT_NAME/bmnroot/
        ssh $STRATUM_0 "sudo cvmfs_server publish nica.jinr.ru"
      else
        echo "Failed to start new transaction"
        exit 1
      fi
    - ssh-agent -k
  only:
    - tags
    - dev
  allow_failure: false
  
  
deploy:centos7:
  image: git.jinr.ru:5005/nica/docker-images/centos7/fair:latest
  environment:
    name: centos7
  tags:
    - docker
    - no-cvmfs
  <<: *deploy


build_docker:
  before_script:
    - echo "Skipping global before_script"
  image: alpine:latest
  stage: deploy
  script:
    - apk add --no-cache curl
    - "curl -X POST -F token=$BUILD_TRIGGER_TOKEN -F ref=master -F variables[BMN]=true -F variables[VERSION]=$CI_COMMIT_REF_SLUG -F variables[SHA]=$CI_COMMIT_SHA https://git.jinr.ru/api/v4/projects/628/trigger/pipeline"
  only:
    - tags
    - dev

/********************************************************************************
 *    Copyright (C) 2014 GSI Helmholtzzentrum fuer Schwerionenforschung GmbH    *
 *                                                                              *
 *              This software is distributed under the terms of the             * 
 *              GNU Lesser General Public Licence (LGPL) version 3,             *  
 *                  copied verbatim in the file "LICENSE"                       *
 ********************************************************************************/
/* Generated by Together */
#include "FairPipe.h"

#include "FairGeoPipe.h"
#include "FairGeoBuilder.h"             // for FairGeoBuilder
#include "FairGeoInterface.h"           // for FairGeoInterface
#include "FairGeoLoader.h"              // for FairGeoLoader
#include "FairGeoMedia.h"               // for FairGeoMedia
#include "FairGeoPassivePar.h"          // for FairGeoPassivePar
#include "FairRun.h"                    // for FairRun
#include "FairRuntimeDb.h"              // for FairRuntimeDb

#include "TGeoCompositeShape.h"         // for TGeoCompositeShape
#include "TGeoManager.h"                // for TGeoManager, gGeoManager
#include "TGeoMatrix.h"                 // for TGeoRotation
#include "TGeoPcon.h"                   // for TGeoPcon
#include "TGeoVolume.h"                 // for TGeoVolume, etc

class FairGeoMedium;

FairPipe::~FairPipe()
{
}

FairPipe::FairPipe()
  : FairModule("FairPipe", "")
{
}

FairPipe::FairPipe(const char* name, const char* title)
  : FairModule(name ,title)
{
}

FairPipe::FairPipe(const FairPipe& rhs)
 : FairModule(rhs)
{
}

void FairPipe::ConstructGeometry()
{
    FairGeoLoader *loader=FairGeoLoader::Instance();
    FairGeoInterface *GeoInterface =loader->getGeoInterface();
    FairGeoPipe *MGeo=new FairGeoPipe();
    MGeo->setGeomFile(GetGeometryFileName());
    GeoInterface->addGeoModule(MGeo);
    Bool_t rc = GeoInterface->readSet(MGeo);
    if ( rc ) MGeo->create(loader->getGeoBuilder());

    TList* volList = MGeo->getListOfVolumes();
    // store geo parameter
    FairRun *fRun = FairRun::Instance();
    FairRuntimeDb *rtdb= FairRun::Instance()->GetRuntimeDb();
    FairGeoPassivePar* par=(FairGeoPassivePar*)(rtdb->getContainer("FairGeoPassivePar"));
    TObjArray *fSensNodes = par->GetGeoSensitiveNodes();
    TObjArray *fPassNodes = par->GetGeoPassiveNodes();

    TListIter iter(volList);
    FairGeoNode* node   = NULL;
    FairGeoVolume *aVol=NULL;

    while( (node = (FairGeoNode*)iter.Next()) ) {
       aVol = dynamic_cast<FairGeoVolume*> ( node );
       if ( node->isSensitive()  ) {
           fSensNodes->AddLast( aVol );
       }else{
           fPassNodes->AddLast( aVol );
       }
    }
    ProcessNodes( volList );
    par->setChanged();
    par->setInputVersion(fRun->GetRunId(),1);
}

FairModule* FairPipe::CloneModule() const
{
  return new FairPipe(*this);
}

ClassImp(FairPipe)

